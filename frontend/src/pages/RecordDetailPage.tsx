/* eslint-disable @typescript-eslint/no-explicit-any */

import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import {
  Box,
  Typography,
  TextField,
  Button,
  Grid,
  Card,
  CardContent,
  CircularProgress,
  Alert,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  FormControlLabel,
  Checkbox,
  IconButton,
  useTheme,
  useMediaQuery,
  Menu,
  Stack,
  Divider
} from '@mui/material';
import {
  ArrowBack as BackIcon,
  Edit as EditIcon,
  Save as SaveIcon,
  Cancel as CancelIcon,
  Delete as DeleteIcon,
  Share as ShareIcon,
  MoreVert as MoreVertIcon,
  Print as PrintIcon,
  Bluetooth as BluetoothIcon
} from '@mui/icons-material';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { useForm, Controller } from 'react-hook-form';
import { format } from 'date-fns';
import { ru } from 'date-fns/locale';
import JsBarcode from 'jsbarcode';
import { recordsApi, fieldsApi } from '../services/api';
import { useAuth } from '../contexts/AuthContext';

const RecordDetailPage: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const queryClient = useQueryClient();
  const { user } = useAuth();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));
  const isTablet = useMediaQuery(theme.breakpoints.down('md'));
  
  const [isEditing, setIsEditing] = useState(false);
  const [barcodeDataUrl, setBarcodeDataUrl] = useState<string>('');
  const [mobileMenuAnchor, setMobileMenuAnchor] = useState<null | HTMLElement>(null);
  
  const { control, handleSubmit, reset, formState: { errors } } = useForm<any>();

  console.log('üîç RecordDetailPage - ID –∏–∑ URL:', id);

  React.useEffect(() => {
    if (id === 'create' || id === 'new' || !id) {
      console.log('‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π ID, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å–ø–∏—Å–æ–∫');
      navigate('/records', { replace: true });
      return;
    }
  }, [id, navigate]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø–∏—Å–∏
  const { data: recordData, isLoading: recordLoading, error: recordError } = useQuery({
    queryKey: ['record', id],
    queryFn: async () => {
      if (!id || id === 'create' || id === 'new') {
        throw new Error('Invalid record ID');
      }
      console.log('üì° –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–ø–∏—Å—å —Å ID:', id);
      return recordsApi.getById(id);
    },
    enabled: !!id && id !== 'create' && id !== 'new'
  });

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–æ–ª–µ–π
  const { data: fieldsData, isLoading: fieldsLoading } = useQuery({
    queryKey: ['fields'],
    queryFn: fieldsApi.getAll,
  });

  const record = recordData?.data;
  console.log('üìã –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏:', record);

  // –ú—É—Ç–∞—Ü–∏–∏
  const updateMutation = useMutation({
    mutationFn: (updateData: any) => recordsApi.update(id!, updateData),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['record', id] });
      queryClient.invalidateQueries({ queryKey: ['records'] });
      setIsEditing(false);
    },
    onError: (error) => {
      console.error('Update error:', error);
    },
  });

  const deleteMutation = useMutation({
    mutationFn: () => recordsApi.delete(id!),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['records'] });
      navigate('/records');
    },
    onError: (error) => {
      console.error('Delete error:', error);
    },
  });

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
  const isOwner = record?.owner?.id === user?.id || record?.owner === user?.id;
  const isAdmin = user?.role?.type === 'admin';
  const canEdit = isOwner || isAdmin;

  // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–ª–µ–π
  const fields = React.useMemo(() => {
    if (!fieldsData) return [];
    
    if (fieldsData.data) {
      return Array.isArray(fieldsData.data) ? fieldsData.data : [];
    }
    
    if (Array.isArray(fieldsData)) {
      return fieldsData;
    }
    
    return [];
  }, [fieldsData]);

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —à—Ç—Ä–∏—Ö–∫–æ–¥–∞
  useEffect(() => {
    if (record?.barcode) {
      const canvas = document.createElement('canvas');
      JsBarcode(canvas, record.barcode, {
        format: "EAN13",
        width: 2,
        height: 100,
        displayValue: true,
        fontSize: 14,
        margin: 10
      });
      setBarcodeDataUrl(canvas.toDataURL('image/png'));
    }
  }, [record?.barcode]);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
  useEffect(() => {
    if (record) {
      const formData: any = {};
      
      fields.forEach((field: any) => {
        const value = record.dynamicData?.[field.id];
        formData[`dynamicData.${field.id}`] = value || '';
      });

      reset(formData);
    }
  }, [record, fields, reset]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
  const handleEdit = () => {
    setIsEditing(true);
    handleMobileMenuClose();
  };

  const handleCancel = () => {
    setIsEditing(false);
    if (record) {
      const formData: any = {};
      
      fields.forEach((field: any) => {
        const value = record.dynamicData?.[field.id];
        formData[`dynamicData.${field.id}`] = value || '';
      });

      reset(formData);
    }
  };

  const handleDelete = () => {
    if (window.confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å ${record?.barcode}?`)) {
      deleteMutation.mutate();
    }
    handleMobileMenuClose();
  };

  const onSubmit = (data: any) => {
    console.log('Form data:', data);
    
    const updateData: any = {
      name: data.name || record?.name,
      dynamicData: {},
    };

    // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –ø–æ–ª–µ–π
    Object.keys(data).forEach(key => {
      if (key.startsWith('dynamicData.')) {
        const fieldId = key.replace('dynamicData.', '');
        updateData.dynamicData[fieldId] = data[key];
      }
    });

    console.log('Update data:', updateData);
    updateMutation.mutate(updateData);
  };

const handleShare = async () => {
  if (!record?.barcode) {
    alert('–®—Ç—Ä–∏—Ö–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }

  try {
    // –°–æ–∑–¥–∞–µ–º canvas –¥–ª—è —à—Ç—Ä–∏—Ö–∫–æ–¥–∞
    const canvas = document.createElement('canvas');
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —à—Ç—Ä–∏—Ö–∫–æ–¥ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
    JsBarcode(canvas, record.barcode, {
      format: "EAN13",
      width: 2,              // –®–∏—Ä–∏–Ω–∞ –ª–∏–Ω–∏–∏ (2px –¥–ª—è —Ö–æ—Ä–æ—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏)
      height: 80,            // –í—ã—Å–æ—Ç–∞ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞ (80px —Å—Ç–∞–Ω–¥–∞—Ä—Ç)
      displayValue: true,    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∏—Å–ª–∞ –ø–æ–¥ —à—Ç—Ä–∏—Ö–∫–æ–¥–æ–º
      fontSize: 16,          // –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è —á–∏—Å–µ–ª
      margin: 10,            // –û—Ç—Å—Ç—É–ø—ã –≤–æ–∫—Ä—É–≥ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞
      background: '#ffffff',
      lineColor: '#000000',
      textMargin: 2,         // –û—Ç—Å—Ç—É–ø —Ç–µ–∫—Å—Ç–∞ –æ—Ç —à—Ç—Ä–∏—Ö–∫–æ–¥–∞
      fontOptions: "",       // –û–±—ã—á–Ω—ã–π —à—Ä–∏—Ñ—Ç
      textAlign: "center"    // –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ —Ü–µ–Ω—Ç—Ä—É
    });

    console.log('–†–∞–∑–º–µ—Ä —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞:', canvas.width + 'x' + canvas.height);

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ blob
    const blob = await new Promise<Blob>((resolve, reject) => {
      canvas.toBlob((blob) => {
        if (blob) {
          resolve(blob);
        } else {
          reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'));
        }
      }, 'image/png', 1.0);
    });

    // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª
    const file = new File([blob], `barcode-${record.barcode}.png`, {
      type: 'image/png',
    });

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent);
    const isAndroid = /Android/i.test(navigator.userAgent);
    const isMobile = isIOS || isAndroid;

    // –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Web Share API
    if (navigator.share) {
      try {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Å —Ñ–∞–π–ª–æ–º
        if (navigator.canShare && navigator.canShare({ files: [file] })) {
          await navigator.share({
            files: [file],
            title: '–®—Ç—Ä–∏—Ö–∫–æ–¥',
            text: record.barcode
          });
          console.log('–ü–æ–¥–µ–ª–∏–ª–∏—Å—å —á–µ—Ä–µ–∑ Web Share API —Å —Ñ–∞–π–ª–æ–º');
          return;
        }

        // –ï—Å–ª–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–∞–π–ª—ã, —Å–æ–∑–¥–∞–µ–º blob URL
        const blobUrl = URL.createObjectURL(blob);
        
        // –ü—Ä–æ–±—É–µ–º –ø–æ–¥–µ–ª–∏—Ç—å—Å—è URL
        await navigator.share({
          title: `–®—Ç—Ä–∏—Ö–∫–æ–¥ ${record.barcode}`,
          text: `–®—Ç—Ä–∏—Ö–∫–æ–¥: ${record.barcode}`,
          url: blobUrl
        });
        
        // –û—á–∏—â–∞–µ–º URL –ø–æ—Å–ª–µ –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
        setTimeout(() => URL.revokeObjectURL(blobUrl), 5000);
        console.log('–ü–æ–¥–µ–ª–∏–ª–∏—Å—å —á–µ—Ä–µ–∑ Web Share API —Å URL');
        return;
        
      } catch (error) {
        console.log('Web Share API –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:', error);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏
      }
    }

    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
    if (isIOS) {
      // –î–ª—è iOS —Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
      const dataUrl = canvas.toDataURL('image/png');
      const newTab = window.open('', '_blank');
      
      if (newTab) {
        newTab.document.write(`
          <!DOCTYPE html>
          <html>
          <head>
            <title>–®—Ç—Ä–∏—Ö–∫–æ–¥ ${record.barcode}</title>
            <meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=yes">
            <style>
              body {
                margin: 0;
                padding: 20px;
                background: #f0f0f0;
                font-family: -apple-system, system-ui, sans-serif;
                text-align: center;
              }
              .container {
                background: white;
                border-radius: 12px;
                padding: 20px;
                box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                display: inline-block;
                max-width: 90%;
              }
              .barcode-img {
                display: block;
                margin: 20px auto;
                max-width: 100%;
                height: auto;
                border: 1px solid #ddd;
              }
              .barcode-number {
                font-family: 'SF Mono', Monaco, monospace;
                font-size: 18px;
                color: #333;
                margin: 10px 0;
                word-break: break-all;
              }
              .hint {
                color: #666;
                font-size: 14px;
                margin-top: 20px;
                line-height: 1.5;
              }
              .actions {
                margin-top: 20px;
              }
              .btn {
                display: inline-block;
                padding: 12px 24px;
                background: #007AFF;
                color: white;
                text-decoration: none;
                border-radius: 8px;
                font-weight: 500;
                margin: 5px;
              }
            </style>
          </head>
          <body>
            <div class="container">
              <h2>–®—Ç—Ä–∏—Ö–∫–æ–¥</h2>
              <div class="barcode-number">${record.barcode}</div>
              <img src="${dataUrl}" alt="Barcode" class="barcode-img">
              <div class="hint">
                –ù–∞–∂–º–∏—Ç–µ –∏ —É–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ,<br>
                –∑–∞—Ç–µ–º –≤—ã–±–µ—Ä–∏—Ç–µ ¬´–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ¬ª<br>
                –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–¥–µ–ª–∏—Ç—å—Å—è¬ª –≤ Safari
              </div>
            </div>
          </body>
          </html>
        `);
        newTab.document.close();
      }
      
    } else if (isAndroid || isMobile) {
      // –î–ª—è Android –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
      const link = document.createElement('a');
      link.href = URL.createObjectURL(blob);
      link.download = `barcode-${record.barcode}.png`;
      link.style.display = 'none';
      document.body.appendChild(link);
      link.click();
      
      setTimeout(() => {
        document.body.removeChild(link);
        URL.revokeObjectURL(link.href);
      }, 100);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      setTimeout(() => {
        if (confirm('–®—Ç—Ä–∏—Ö–∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∑–∞–≥—Ä—É–∑–∫–∏. –û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É —Å –∑–∞–≥—Ä—É–∑–∫–∞–º–∏?')) {
          // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ (—Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ –Ω–∞ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö)
          window.open('content://downloads/', '_blank');
        }
      }, 1000);
      
    } else {
      // –î–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞ - –∫–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –∏–ª–∏ —Å–∫–∞—á–∏–≤–∞–µ–º
      if (navigator.clipboard && navigator.clipboard.write) {
        try {
          await navigator.clipboard.write([
            new ClipboardItem({ 'image/png': blob })
          ]);
          alert('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
        } catch (e) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤ –±—É—Ñ–µ—Ä:', e);
          // Fallback –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
          downloadBarcodeImage(canvas, record.barcode);
        }
      } else {
        downloadBarcodeImage(canvas, record.barcode);
      }
    }
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error);
    alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —à—Ç—Ä–∏—Ö–∫–æ–¥');
  }
};

  // –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ Bluetooth (–∑–∞–≥–ª—É—à–∫–∞)
  const handleBluetoothSend = () => {
    alert('–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ Bluetooth –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ –±—É–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö');
  };

  // –§—É–Ω–∫—Ü–∏—è –ø–µ—á–∞—Ç–∏ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞
  const handlePrint = () => {
    if (!barcodeDataUrl) return;
    
    const printWindow = window.open('', '_blank');
    if (printWindow) {
      printWindow.document.write(`
        <html>
          <head>
            <title>–ü–µ—á–∞—Ç—å —à—Ç—Ä–∏—Ö–∫–æ–¥–∞ ${record?.barcode}</title>
            <style>
              body {
                margin: 0;
                padding: 20px;
                display: flex;
                justify-content: center;
                align-items: center;
                min-height: 100vh;
              }
              img {
                max-width: 100%;
                height: auto;
              }
              @media print {
                body {
                  padding: 0;
                }
              }
            </style>
          </head>
          <body>
            <img src="${barcodeDataUrl}" alt="–®—Ç—Ä–∏—Ö–∫–æ–¥ ${record?.barcode}" />
          </body>
        </html>
      `);
      printWindow.document.close();
      printWindow.focus();
      printWindow.print();
    }
  };

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const downloadBarcodeImage = (canvas: HTMLCanvasElement, barcode: string) => {
    const link = document.createElement('a');
    link.download = `barcode-${barcode}.png`;
    link.href = canvas.toDataURL('image/png');
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    alert('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ –ø–∞–ø–∫—É –∑–∞–≥—Ä—É–∑–æ–∫');
  };

  const formatFieldValue = (value: any, fieldType: string) => {
    if (!value) return '';
    
    switch (fieldType) {
      case 'MONEY':
        return new Intl.NumberFormat('ru-RU', {
          style: 'currency',
          currency: 'RUB'
        }).format(parseFloat(value));
      case 'NUMBER':
        return new Intl.NumberFormat('ru-RU').format(parseFloat(value));
      case 'CHECKBOX':
        return value ? '–î–∞' : '–ù–µ—Ç';
      default:
        return value;
    }
  };

  // –ú–æ–±–∏–ª—å–Ω–æ–µ –º–µ–Ω—é
  const handleMobileMenuOpen = (event: React.MouseEvent<HTMLElement>) => {
    setMobileMenuAnchor(event.currentTarget);
  };

  const handleMobileMenuClose = () => {
    setMobileMenuAnchor(null);
  };

  if (recordLoading || fieldsLoading) {
    return (
      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: 400 }}>
        <CircularProgress />
      </Box>
    );
  }

  if (recordError || !record) {
    return (
      <Box sx={{ p: 3 }}>
        <Alert severity="error">
          {recordError?.message || '–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}
        </Alert>
        <Button 
          startIcon={<BackIcon />} 
          onClick={() => navigate('/records')}
          sx={{ mt: 2 }}
        >
          –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É
        </Button>
      </Box>
    );
  }

  return (
    <Box sx={{ p: isMobile ? 2 : 3 }}>
      {/* –•–µ–¥–µ—Ä */}
      <Box sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>
        <IconButton onClick={() => navigate('/records')} sx={{ mr: 1 }}>
          <BackIcon />
        </IconButton>
        <Typography 
          variant={isMobile ? "h6" : "h4"} 
          component="h1" 
          sx={{ flexGrow: 1, fontSize: isMobile ? '1.1rem' : undefined }}
        >
          {isEditing ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ' : '–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–∏'}
        </Typography>
        
        {/* –î–µ—Å–∫—Ç–æ–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ */}
        {!isMobile && (
          <Box sx={{ display: 'flex', gap: 1 }}>
            {!isEditing && canEdit && (
              <Button
                variant="outlined"
                startIcon={<EditIcon />}
                onClick={handleEdit}
              >
                –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
              </Button>
            )}
            {canEdit && (
              <Button
                variant="outlined"
                color="error"
                startIcon={<DeleteIcon />}
                onClick={handleDelete}
              >
                –£–¥–∞–ª–∏—Ç—å
              </Button>
            )}
          </Box>
        )}
        
        {/* –ú–æ–±–∏–ª—å–Ω–æ–µ –º–µ–Ω—é */}
        {isMobile && canEdit && !isEditing && (
          <>
            <IconButton onClick={handleMobileMenuOpen}>
              <MoreVertIcon />
            </IconButton>
            <Menu
              anchorEl={mobileMenuAnchor}
              open={Boolean(mobileMenuAnchor)}
              onClose={handleMobileMenuClose}
            >
              <MenuItem onClick={handleEdit}>
                <EditIcon sx={{ mr: 1 }} fontSize="small" />
                –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
              </MenuItem>
              <MenuItem onClick={handleDelete} sx={{ color: 'error.main' }}>
                <DeleteIcon sx={{ mr: 1 }} fontSize="small" />
                –£–¥–∞–ª–∏—Ç—å
              </MenuItem>
            </Menu>
          </>
        )}
      </Box>

      <form onSubmit={handleSubmit(onSubmit)}>
        <Grid container spacing={isMobile ? 2 : 3}>
          {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
          <Grid size={{ xs: 12, md: 8 }}>
            <Card>
              <CardContent sx={{ p: isMobile ? 2 : 3 }}>
                <Typography variant="h6" gutterBottom>
                  –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                </Typography>
                
                <Grid container spacing={2}>
                  {/* –®—Ç—Ä–∏—Ö–∫–æ–¥ */}
                  <Grid size={{ xs: 12 }}>
                    <TextField
                      label="–®—Ç—Ä–∏—Ö–∫–æ–¥ (—É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä)"
                      value={record?.barcode || ''}
                      fullWidth
                      disabled
                      variant="outlined"
                      helperText="–®—Ç—Ä–∏—Ö–∫–æ–¥ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
                      size={isMobile ? "small" : "medium"}
                    />
                  </Grid>
                </Grid>

                {/* –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–æ–ª—è */}
                {fields && fields.length > 0 && (
                  <>
                    <Typography variant="h6" sx={{ mt: 3, mb: 2 }}>
                      –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
                    </Typography>
                    <Grid container spacing={2}>
                      {fields.map((field: any) => {
                        const fieldData = field.attributes || field;
                        const value = record?.dynamicData?.[field.id];

                        return (
                          <Grid size={{ xs: 12, sm: isTablet ? 12 : 6 }} key={field.id}>
                            {isEditing ? (
                              <>
                                {fieldData.fieldType === 'STRING' && (
                                  <Controller
                                    name={`dynamicData.${field.id}`}
                                    control={control}
                                    rules={{ required: fieldData.required ? '–≠—Ç–æ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' : false }}
                                    render={({ field: controllerField }) => (
                                      <TextField
                                        {...controllerField}
                                        label={fieldData.name}
                                        fullWidth
                                        error={!!errors[`dynamicData.${field.id}`]}
                                        helperText={errors[`dynamicData.${field.id}`]?.message as string || ''}
                                        required={fieldData.required}
                                        size={isMobile ? "small" : "medium"}
                                      />
                                    )}
                                  />
                                )}
                                {fieldData.fieldType === 'NUMBER' && (
                                  <Controller
                                    name={`dynamicData.${field.id}`}
                                    control={control}
                                    rules={{ required: fieldData.required ? '–≠—Ç–æ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' : false }}
                                    render={({ field: controllerField }) => (
                                      <TextField
                                        {...controllerField}
                                        label={fieldData.name}
                                        type="number"
                                        fullWidth
                                        error={!!errors[`dynamicData.${field.id}`]}
                                        helperText={errors[`dynamicData.${field.id}`]?.message as string || ''}
                                        required={fieldData.required}
                                        size={isMobile ? "small" : "medium"}
                                      />
                                    )}
                                  />
                                )}
                                {fieldData.fieldType === 'MONEY' && (
                                  <Controller
                                    name={`dynamicData.${field.id}`}
                                    control={control}
                                    rules={{ required: fieldData.required ? '–≠—Ç–æ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' : false }}
                                    render={({ field: controllerField }) => (
                                      <TextField
                                        {...controllerField}
                                        label={`${fieldData.name} (‚ÇΩ)`}
                                        type="number"
                                        fullWidth
                                        error={!!errors[`dynamicData.${field.id}`]}
                                        helperText={errors[`dynamicData.${field.id}`]?.message as string || ''}
                                        required={fieldData.required}
                                        size={isMobile ? "small" : "medium"}
                                      />
                                    )}
                                  />
                                )}
                                {fieldData.fieldType === 'SELECT' && (
                                  <Controller
                                    name={`dynamicData.${field.id}`}
                                    control={control}
                                    rules={{ required: fieldData.required ? '–≠—Ç–æ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' : false }}
                                    render={({ field: controllerField }) => (
                                      <FormControl 
                                        fullWidth 
                                        error={!!errors[`dynamicData.${field.id}`]}
                                        size={isMobile ? "small" : "medium"}
                                      >
                                        <InputLabel required={fieldData.required}>
                                          {fieldData.name}
                                        </InputLabel>
                                        <Select
                                          {...controllerField}
                                          label={fieldData.name}
                                        >
                                          <MenuItem value="">
                                            <em>–ù–µ –≤—ã–±—Ä–∞–Ω–æ</em>
                                          </MenuItem>
                                          {fieldData.options?.map((option: string) => (
                                            <MenuItem key={option} value={option}>
                                              {option}
                                            </MenuItem>
                                          ))}
                                        </Select>
                                      </FormControl>
                                    )}
                                  />
                                )}
                                {fieldData.fieldType === 'CHECKBOX' && (
                                  <Controller
                                    name={`dynamicData.${field.id}`}
                                    control={control}
                                    render={({ field: controllerField }) => (
                                      <FormControlLabel
                                        control={
                                          <Checkbox
                                            {...controllerField}
                                            checked={controllerField.value || false}
                                          />
                                        }
                                        label={fieldData.name}
                                      />
                                    )}
                                  />
                                )}
                              </>
                            ) : (
                              <TextField
                                label={fieldData.name}
                                value={formatFieldValue(value, fieldData.fieldType) || '-'}
                                fullWidth
                                disabled
                                variant="outlined"
                                size={isMobile ? "small" : "medium"}
                              />
                            )}
                          </Grid>
                        );
                      })}
                    </Grid>
                  </>
                )}

                {/* –ö–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
                {isEditing && (
                  <Box sx={{ mt: 3, display: 'flex', gap: 1, flexWrap: 'wrap' }}>
                    <Button
                      type="submit"
                      variant="contained"
                      startIcon={updateMutation.isPending ? <CircularProgress size={20} /> : <SaveIcon />}
                      disabled={updateMutation.isPending}
                      fullWidth={isMobile}
                    >
                      –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                    </Button>
                    <Button
                      variant="outlined"
                      startIcon={<CancelIcon />}
                      onClick={handleCancel}
                      disabled={updateMutation.isPending}
                      fullWidth={isMobile}
                    >
                      –û—Ç–º–µ–Ω–∞
                    </Button>
                  </Box>
                )}
              </CardContent>
            </Card>
          </Grid>

          {/* –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å */}
          <Grid size={{ xs: 12, md: 4 }}>
            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø–∏—Å–∏ */}
            <Card sx={{ mb: 2 }}>
              <CardContent sx={{ p: isMobile ? 2 : 3 }}>
                <Typography variant="h6" gutterBottom>
                  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø–∏—Å–∏
                </Typography>
                
                <Stack spacing={2}>
                  <Box>
                    <Typography variant="body2" color="text.secondary">
                      –°–æ–∑–¥–∞—Ç–µ–ª—å
                    </Typography>
                    <Typography variant="body1">
                      {record?.owner?.username || record?.owner?.email || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
                    </Typography>
                  </Box>

                  <Box>
                    <Typography variant="body2" color="text.secondary">
                      –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
                    </Typography>
                    <Typography variant="body1">
                      {record?.createdAt ? format(new Date(record.createdAt), 'dd.MM.yyyy –≤ HH:mm', { locale: ru }) : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
                    </Typography>
                  </Box>

                  <Box>
                    <Typography variant="body2" color="text.secondary">
                      –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
                    </Typography>
                    <Typography variant="body1">
                      {record?.updatedAt ? format(new Date(record.updatedAt), 'dd.MM.yyyy –≤ HH:mm', { locale: ru }) : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
                    </Typography>
                  </Box>
                </Stack>
              </CardContent>
            </Card>

            {/* –®—Ç—Ä–∏—Ö–∫–æ–¥ */}
            <Card>
              <CardContent sx={{ p: isMobile ? 2 : 3 }}>
                <Typography variant="h6" gutterBottom>
                  –®—Ç—Ä–∏—Ö–∫–æ–¥
                </Typography>
                
                <Box sx={{ textAlign: 'center', mb: 2 }}>
                  {barcodeDataUrl && (
                    <img 
                      src={barcodeDataUrl} 
                      alt="–®—Ç—Ä–∏—Ö–∫–æ–¥" 
                      style={{ 
                        maxWidth: '100%', 
                        height: 'auto',
                        maxHeight: isMobile ? '80px' : '100px'
                      }} 
                    />
                  )}
                </Box>

                <Typography 
                  variant="body2" 
                  color="text.secondary" 
                  sx={{ textAlign: 'center', mb: 2, fontFamily: 'monospace' }}
                >
                  {record?.barcode}
                </Typography>

                <Divider sx={{ my: 2 }} />

                {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —Å–æ —à—Ç—Ä–∏—Ö–∫–æ–¥–æ–º */}
                <Stack spacing={1}>
                  <Button
                    variant="outlined"
                    startIcon={<ShareIcon />}
                    onClick={handleShare}
                    size={isMobile ? "small" : "medium"}
                    fullWidth
                  >
                    –ü–æ–¥–µ–ª–∏—Ç—å—Å—è
                  </Button>
                  
                  <Button
                    variant="outlined"
                    startIcon={<PrintIcon />}
                    onClick={handlePrint}
                    size={isMobile ? "small" : "medium"}
                    fullWidth
                  >
                    –ü–µ—á–∞—Ç—å
                  </Button>
                  
                  <Button
                    variant="outlined"
                    startIcon={<BluetoothIcon />}
                    onClick={handleBluetoothSend}
                    size={isMobile ? "small" : "medium"}
                    fullWidth
                    sx={{ 
                      borderColor: 'primary.main',
                      color: 'primary.main',
                      '&:hover': {
                        borderColor: 'primary.dark',
                        backgroundColor: 'primary.main',
                        color: 'white'
                      }
                    }}
                  >
                    –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ Bluetooth
                  </Button>
                </Stack>
              </CardContent>
            </Card>
          </Grid>
        </Grid>
      </form>
    </Box>
  );
};

export default RecordDetailPage;