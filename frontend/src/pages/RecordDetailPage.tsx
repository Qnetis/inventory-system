/* eslint-disable @typescript-eslint/no-explicit-any */

import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import {
  Box,
  Typography,
  TextField,
  Button,
  Grid,
  Card,
  CardContent,
  CircularProgress,
  Alert,
  MenuItem,
  FormControlLabel,
  Checkbox,
  IconButton,
  useTheme,
  useMediaQuery,
  Menu,
  Stack,
  Divider,
  Autocomplete,
} from '@mui/material';
import {
  ArrowBack as BackIcon,
  Edit as EditIcon,
  Save as SaveIcon,
  Cancel as CancelIcon,
  Delete as DeleteIcon,
  MoreVert as MoreVertIcon,
} from '@mui/icons-material';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { useForm, Controller } from 'react-hook-form';
import { format } from 'date-fns';
import { ru } from 'date-fns/locale';
import JsBarcode from 'jsbarcode';
import { recordsApi, fieldsApi } from '../services/api';
import { useAuth } from '../contexts/AuthContext';

const RecordDetailPage: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const queryClient = useQueryClient();
  const { user } = useAuth();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));
  const isTablet = useMediaQuery(theme.breakpoints.down('md'));
  
  const [isEditing, setIsEditing] = useState(false);
  const [barcodeDataUrl, setBarcodeDataUrl] = useState<string>('');
  const [mobileMenuAnchor, setMobileMenuAnchor] = useState<null | HTMLElement>(null);
  
  const { control, handleSubmit, reset, formState: { errors } } = useForm<any>();

  console.log('üîç RecordDetailPage - ID –∏–∑ URL:', id);

  React.useEffect(() => {
    if (id === 'create' || id === 'new' || !id) {
      console.log('‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π ID, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å–ø–∏—Å–æ–∫');
      navigate('/records', { replace: true });
      return;
    }
  }, [id, navigate]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø–∏—Å–∏
  const { data: recordData, isLoading: recordLoading, error: recordError } = useQuery({
    queryKey: ['record', id],
    queryFn: async () => {
      if (!id || id === 'create' || id === 'new') {
        throw new Error('Invalid record ID');
      }
      console.log('üì° –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–ø–∏—Å—å —Å ID:', id);
      return recordsApi.getById(id);
    },
    enabled: !!id && id !== 'create' && id !== 'new'
  });

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–æ–ª–µ–π
  const { data: fieldsData, isLoading: fieldsLoading } = useQuery({
    queryKey: ['fields'],
    queryFn: fieldsApi.getAll,
  });

  const record = recordData?.data;
  console.log('üìã –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏:', record);

  // –ú—É—Ç–∞—Ü–∏–∏
  const updateMutation = useMutation({
    mutationFn: (updateData: any) => recordsApi.update(id!, updateData),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['record', id] });
      queryClient.invalidateQueries({ queryKey: ['records'] });
      setIsEditing(false);
    },
    onError: (error) => {
      console.error('Update error:', error);
    },
  });

  const deleteMutation = useMutation({
    mutationFn: () => recordsApi.delete(id!),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['records'] });
      navigate('/records');
    },
    onError: (error) => {
      console.error('Delete error:', error);
    },
  });

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
  const isOwner = record?.owner?.id === user?.id || record?.owner === user?.id;
  const isAdmin = user?.role?.type === 'admin';
  const canEdit = isOwner || isAdmin;

  // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–ª–µ–π
  const fields = React.useMemo(() => {
    if (!fieldsData) return [];
    
    if (fieldsData.data) {
      return Array.isArray(fieldsData.data) ? fieldsData.data : [];
    }
    
    if (Array.isArray(fieldsData)) {
      return fieldsData;
    }
    
    return [];
  }, [fieldsData]);

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —à—Ç—Ä–∏—Ö–∫–æ–¥–∞
  useEffect(() => {
    if (record?.barcode) {
      const canvas = document.createElement('canvas');
      JsBarcode(canvas, record.barcode, {
        format: "EAN13",
        width: 2,
        height: 100,
        displayValue: true,
        fontSize: 20,
        margin: 10
      });
      setBarcodeDataUrl(canvas.toDataURL('image/png'));
    }
  }, [record?.barcode]);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
  useEffect(() => {
    if (record) {
      const formData: any = {};
      
      fields.forEach((field: any) => {
        const value = record.dynamicData?.[field.id];
        formData[`dynamicData.${field.id}`] = value || '';
      });

      reset(formData);
    }
  }, [record, fields, reset]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
  const handleEdit = () => {
    setIsEditing(true);
    handleMobileMenuClose();
  };

  const handleCancel = () => {
    setIsEditing(false);
    if (record) {
      const formData: any = {};
      
      fields.forEach((field: any) => {
        const value = record.dynamicData?.[field.id];
        formData[`dynamicData.${field.id}`] = value || '';
      });

      reset(formData);
    }
  };

  const handleDelete = () => {
    if (window.confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å ${record?.barcode}?`)) {
      deleteMutation.mutate();
    }
    handleMobileMenuClose();
  };

  const onSubmit = (data: any) => {
    console.log('Form data:', data);
    
    const updateData: any = {
      name: data.name || record?.name,
      dynamicData: {},
    };

    // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –ø–æ–ª–µ–π
    Object.keys(data).forEach(key => {
      if (key.startsWith('dynamicData.')) {
        const fieldId = key.replace('dynamicData.', '');
        updateData.dynamicData[fieldId] = data[key];
      }
    });

    console.log('Update data:', updateData);
    updateMutation.mutate(updateData);
  };

  const handleShare = async () => {
    if (!record?.barcode) {
      alert('–®—Ç—Ä–∏—Ö–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    try {
      // –°–æ–∑–¥–∞–µ–º canvas –¥–ª—è —à—Ç—Ä–∏—Ö–∫–æ–¥–∞
      const canvas = document.createElement('canvas');
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —à—Ç—Ä–∏—Ö–∫–æ–¥ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
      JsBarcode(canvas, record.barcode, {
        format: "EAN13",
        width: 2,              // –®–∏—Ä–∏–Ω–∞ –ª–∏–Ω–∏–∏ (2px –¥–ª—è —Ö–æ—Ä–æ—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏)
        height: 80,            // –í—ã—Å–æ—Ç–∞ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞ (80px —Å—Ç–∞–Ω–¥–∞—Ä—Ç)
        displayValue: true,    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∏—Å–ª–∞ –ø–æ–¥ —à—Ç—Ä–∏—Ö–∫–æ–¥–æ–º
        fontSize: 24,          // –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è —á–∏—Å–µ–ª
        margin: 10,            // –û—Ç—Å—Ç—É–ø—ã –≤–æ–∫—Ä—É–≥ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞
        background: '#ffffff',
        lineColor: '#000000',
        textMargin: 2,         // –û—Ç—Å—Ç—É–ø —Ç–µ–∫—Å—Ç–∞ –æ—Ç —à—Ç—Ä–∏—Ö–∫–æ–¥–∞
        fontOptions: "",       // –û–±—ã—á–Ω—ã–π —à—Ä–∏—Ñ—Ç
        textAlign: "center"    // –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ —Ü–µ–Ω—Ç—Ä—É
      });

      console.log('–†–∞–∑–º–µ—Ä —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞:', canvas.width + 'x' + canvas.height);

      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ blob
      const blob = await new Promise<Blob>((resolve, reject) => {
        canvas.toBlob((blob) => {
          if (blob) {
            resolve(blob);
          } else {
            reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'));
          }
        }, 'image/png', 1.0);
      });

      // –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      const link = document.createElement('a');
      link.href = URL.createObjectURL(blob);
      link.download = `barcode-${record.barcode}.png`;
      link.style.display = 'none';
      document.body.appendChild(link);
      link.click();
      
      setTimeout(() => {
        document.body.removeChild(link);
        URL.revokeObjectURL(link.href);
      }, 100);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      alert('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ø–∞–ø–∫—É –∑–∞–≥—Ä—É–∑–æ–∫');
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞:', error);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —à—Ç—Ä–∏—Ö–∫–æ–¥');
    }
  };

  const formatFieldValue = (value: any, fieldType: string) => {
    if (!value) return '';
    
    switch (fieldType) {
      case 'MONEY':
        return new Intl.NumberFormat('ru-RU', {
          style: 'currency',
          currency: 'RUB'
        }).format(parseFloat(value));
      case 'NUMBER':
        return new Intl.NumberFormat('ru-RU').format(parseFloat(value));
      case 'CHECKBOX':
        return value ? '–î–∞' : '–ù–µ—Ç';
      default:
        return String(value);
    }
  };

  // –ú–æ–±–∏–ª—å–Ω–æ–µ –º–µ–Ω—é
  const handleMobileMenuOpen = (event: React.MouseEvent<HTMLElement>) => {
    setMobileMenuAnchor(event.currentTarget);
  };

  const handleMobileMenuClose = () => {
    setMobileMenuAnchor(null);
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞
  if (recordLoading || fieldsLoading) {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" minHeight="400px">
        <CircularProgress />
      </Box>
    );
  }

  // –û—à–∏–±–∫–∞
  if (recordError) {
    console.error('Record error:', recordError);
    return (
      <Box p={isMobile ? 2 : 3}>
        <Alert 
          severity="error" 
          action={
            <Button color="inherit" onClick={() => navigate('/records')}>
              –ö —Å–ø–∏—Å–∫—É
            </Button>
          }
        >
          –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        </Alert>
      </Box>
    );
  }

  if (!record) {
    return (
      <Box p={isMobile ? 2 : 3}>
        <Alert 
          severity="warning"
          action={
            <Button color="inherit" onClick={() => navigate('/records')}>
              –ö —Å–ø–∏—Å–∫—É
            </Button>
          }
        >
          –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        </Alert>
      </Box>
    );
  }

  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–ª–∞–¥–µ–ª—å—Ü–µ
  const ownerInfo = record.owner?.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';

  return (
    <Box p={isMobile ? 2 : 3}>
      <form onSubmit={handleSubmit(onSubmit)}>
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <Box mb={isMobile ? 2 : 3} display="flex" alignItems="center" justifyContent="space-between">
          <Box display="flex" alignItems="center" gap={2}>
            <IconButton onClick={() => navigate('/records')} size={isMobile ? "small" : "medium"}>
              <BackIcon />
            </IconButton>
            <Typography variant={isMobile ? "h6" : "h5"}>
              {isEditing ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏' : '–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–∏'}
            </Typography>
          </Box>

          {/* –î–µ—Å–∫—Ç–æ–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ */}
          {!isMobile && canEdit && (
            <Box display="flex" gap={1}>
              {isEditing ? (
                <>
                  <Button
                    type="submit"
                    variant="contained"
                    startIcon={<SaveIcon />}
                    disabled={updateMutation.isPending}
                  >
                    –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                  </Button>
                  <Button
                    variant="outlined"
                    startIcon={<CancelIcon />}
                    onClick={handleCancel}
                    disabled={updateMutation.isPending}
                  >
                    –û—Ç–º–µ–Ω–∞
                  </Button>
                </>
              ) : (
                <>
                  <Button
                    variant="contained"
                    startIcon={<EditIcon />}
                    onClick={handleEdit}
                  >
                    –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                  </Button>
                  <Button
                    variant="outlined"
                    color="error"
                    startIcon={<DeleteIcon />}
                    onClick={handleDelete}
                  >
                    –£–¥–∞–ª–∏—Ç—å
                  </Button>
                </>
              )}
            </Box>
          )}

          {/* –ú–æ–±–∏–ª—å–Ω–æ–µ –º–µ–Ω—é */}
          {isMobile && canEdit && (
            <>
              <IconButton onClick={handleMobileMenuOpen} size="small">
                <MoreVertIcon />
              </IconButton>
              <Menu
                anchorEl={mobileMenuAnchor}
                open={Boolean(mobileMenuAnchor)}
                onClose={handleMobileMenuClose}
              >
                {isEditing ? (
                  [
                    <MenuItem key="save" onClick={handleSubmit(onSubmit)}>
                      <SaveIcon fontSize="small" sx={{ mr: 1 }} />
                      –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                    </MenuItem>,
                    <MenuItem key="cancel" onClick={handleCancel}>
                      <CancelIcon fontSize="small" sx={{ mr: 1 }} />
                      –û—Ç–º–µ–Ω–∞
                    </MenuItem>
                  ]
                ) : (
                  [
                    <MenuItem key="edit" onClick={handleEdit}>
                      <EditIcon fontSize="small" sx={{ mr: 1 }} />
                      –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                    </MenuItem>,
                    <Divider key="divider" />,
                    <MenuItem key="delete" onClick={handleDelete} sx={{ color: 'error.main' }}>
                      <DeleteIcon fontSize="small" sx={{ mr: 1 }} />
                      –£–¥–∞–ª–∏—Ç—å
                    </MenuItem>
                  ]
                )}
              </Menu>
            </>
          )}
        </Box>

        {/* –°–æ–æ–±—â–µ–Ω–∏—è */}
        {updateMutation.isError && (
          <Alert severity="error" sx={{ mb: 2 }}>
            –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏
          </Alert>
        )}

        {updateMutation.isSuccess && (
          <Alert severity="success" sx={{ mb: 2 }}>
            –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞
          </Alert>
        )}

        {/* –ö–æ–Ω—Ç–µ–Ω—Ç */}
        <Grid container spacing={isMobile ? 2 : 3}>
          {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
          <Grid size={{ xs: 12, md: 8 }}>
            <Card>
              <CardContent sx={{ p: isMobile ? 2 : 3 }}>
                <Typography variant="h6" gutterBottom>
                  –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                </Typography>
                
                <Grid container spacing={2}>
                  {/* –®—Ç—Ä–∏—Ö–∫–æ–¥ */}
                  <Grid size={{ xs: 12 }}>
                    <TextField
                      label="–®—Ç—Ä–∏—Ö–∫–æ–¥ (—É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä)"
                      value={record?.barcode || ''}
                      fullWidth
                      disabled
                      variant="outlined"
                      helperText="–®—Ç—Ä–∏—Ö–∫–æ–¥ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
                      size={isMobile ? "small" : "medium"}
                    />
                  </Grid>
                </Grid>

                {/* –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–æ–ª—è */}
                {fields && fields.length > 0 && (
                  <>
                    <Typography variant="h6" sx={{ mt: 3, mb: 2 }}>
                      –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
                    </Typography>
                    <Grid container spacing={2}>
                      {fields.map((field: any) => {
                        const fieldData = field.attributes || field;
                        const value = record?.dynamicData?.[field.id];

                        return (
                          <Grid size={{ xs: 12, sm: isTablet ? 12 : 6 }} key={field.id}>
                            {isEditing ? (
                              <>
                                {fieldData.fieldType === 'STRING' && (
                                  <Controller
                                    name={`dynamicData.${field.id}`}
                                    control={control}
                                    rules={{ required: fieldData.required ? '–≠—Ç–æ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' : false }}
                                    render={({ field: controllerField }) => (
                                      <TextField
                                        {...controllerField}
                                        label={fieldData.name}
                                        fullWidth
                                        error={!!errors[`dynamicData.${field.id}`]}
                                        helperText={errors[`dynamicData.${field.id}`]?.message as string || ''}
                                        required={fieldData.required}
                                        size={isMobile ? "small" : "medium"}
                                      />
                                    )}
                                  />
                                )}

                                {fieldData.fieldType === 'NUMBER' && (
                                  <Controller
                                    name={`dynamicData.${field.id}`}
                                    control={control}
                                    rules={{ required: fieldData.required ? '–≠—Ç–æ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' : false }}
                                    render={({ field: controllerField }) => (
                                      <TextField
                                        {...controllerField}
                                        label={fieldData.name}
                                        type="number"
                                        fullWidth
                                        error={!!errors[`dynamicData.${field.id}`]}
                                        helperText={errors[`dynamicData.${field.id}`]?.message as string || ''}
                                        required={fieldData.required}
                                        size={isMobile ? "small" : "medium"}
                                      />
                                    )}
                                  />
                                )}

                                {fieldData.fieldType === 'MONEY' && (
                                  <Controller
                                    name={`dynamicData.${field.id}`}
                                    control={control}
                                    rules={{ required: fieldData.required ? '–≠—Ç–æ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' : false }}
                                    render={({ field: controllerField }) => (
                                      <TextField
                                        {...controllerField}
                                        label={fieldData.name}
                                        type="number"
                                        fullWidth
                                        error={!!errors[`dynamicData.${field.id}`]}
                                        helperText={errors[`dynamicData.${field.id}`]?.message as string || ''}
                                        required={fieldData.required}
                                        InputProps={{
                                          endAdornment: '‚ÇΩ'
                                        }}
                                        size={isMobile ? "small" : "medium"}
                                      />
                                    )}
                                  />
                                )}

                                {fieldData.fieldType === 'SELECT' && (
                                  <Controller
                                    name={`dynamicData.${field.id}`}
                                    control={control}
                                    rules={{ required: fieldData.required ? '–≠—Ç–æ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' : false }}
                                    render={({ field: controllerField }) => {
                                      const options = fieldData.selectOptions || [];
                                      return (
                                        <Autocomplete
                                          {...controllerField}
                                          options={options}
                                          value={controllerField.value || ''}
                                          onChange={(_, newValue) => controllerField.onChange(newValue)}
                                          freeSolo
                                          renderInput={(params) => (
                                            <TextField
                                              {...params}
                                              label={fieldData.name}
                                              error={!!errors[`dynamicData.${field.id}`]}
                                              helperText={errors[`dynamicData.${field.id}`]?.message as string || ''}
                                              required={fieldData.required}
                                              size={isMobile ? "small" : "medium"}
                                            />
                                          )}
                                        />
                                      );
                                    }}
                                  />
                                )}

                                {fieldData.fieldType === 'CHECKBOX' && (
                                  <Controller
                                    name={`dynamicData.${field.id}`}
                                    control={control}
                                    render={({ field: controllerField }) => (
                                      <FormControlLabel
                                        control={
                                          <Checkbox
                                            {...controllerField}
                                            checked={controllerField.value === true || controllerField.value === 'true'}
                                            onChange={(e) => controllerField.onChange(e.target.checked)}
                                            size={isMobile ? "small" : "medium"}
                                          />
                                        }
                                        label={fieldData.name}
                                      />
                                    )}
                                  />
                                )}
                              </>
                            ) : (
                              <Box>
                                <Typography variant="body2" color="text.secondary">
                                  {fieldData.name}
                                </Typography>
                                <Typography variant="body1">
                                  {value ? formatFieldValue(value, fieldData.fieldType) : '‚Äî'}
                                </Typography>
                              </Box>
                            )}
                          </Grid>
                        );
                      })}
                    </Grid>
                  </>
                )}
              </CardContent>
            </Card>
          </Grid>

          {/* –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å */}
          <Grid size={{ xs: 12, md: 4 }}>
            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø–∏—Å–∏ */}
            <Card sx={{ mb: isMobile ? 2 : 3 }}>
              <CardContent sx={{ p: isMobile ? 2 : 3 }}>
                <Typography variant="h6" gutterBottom>
                  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø–∏—Å–∏
                </Typography>
                
                <Stack spacing={2}>
                  <Box>
                    <Typography variant="body2" color="text.secondary">
                      –í–ª–∞–¥–µ–ª–µ—Ü
                    </Typography>
                    <Typography variant="body1">
                      {ownerInfo}
                    </Typography>
                  </Box>

                  <Box>
                    <Typography variant="body2" color="text.secondary">
                      –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
                    </Typography>
                    <Typography variant="body1">
                      {record?.createdAt ? format(new Date(record.createdAt), 'dd.MM.yyyy –≤ HH:mm', { locale: ru }) : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
                    </Typography>
                  </Box>

                  <Box>
                    <Typography variant="body2" color="text.secondary">
                      –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
                    </Typography>
                    <Typography variant="body1">
                      {record?.updatedAt ? format(new Date(record.updatedAt), 'dd.MM.yyyy –≤ HH:mm', { locale: ru }) : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
                    </Typography>
                  </Box>
                </Stack>
              </CardContent>
            </Card>

            {/* –®—Ç—Ä–∏—Ö–∫–æ–¥ */}
            <Card>
              <CardContent sx={{ p: isMobile ? 2 : 3 }}>
                <Typography variant="h6" gutterBottom>
                  –®—Ç—Ä–∏—Ö–∫–æ–¥
                </Typography>
                
                <Box sx={{ textAlign: 'center', mb: 2 }}>
                  {barcodeDataUrl && (
                    <img 
                      src={barcodeDataUrl} 
                      alt="–®—Ç—Ä–∏—Ö–∫–æ–¥" 
                      style={{ 
                        width: '189px',  // 50–º–º
                        height: '95px',  // 25–º–º
                        maxWidth: '100%', // –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –º–∞–ª–µ–Ω—å–∫–∏—Ö —ç–∫—Ä–∞–Ω–æ–≤
                        objectFit: 'contain',
                        border: '1px solid #ddd',
                        padding: '5px',
                        backgroundColor: '#fff'
                      }} 
                    />
                  )}
                </Box>

                <Typography 
                  variant="body2" 
                  color="text.secondary" 
                  sx={{ textAlign: 'center', mb: 2, fontFamily: 'monospace' }}
                >
                  {record?.barcode}
                </Typography>

                <Typography 
                  variant="body2" 
                  color="text.secondary" 
                  sx={{ textAlign: 'center', mb: 2, lineHeight: 1.5 }}
                >
                  –ù–∞–∂–º–∏—Ç–µ –∏ —É–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∑–∞—Ç–µ–º –≤—ã–±–µ—Ä–∏—Ç–µ "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è" –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–º –º–µ–Ω—é –±—Ä–∞—É–∑–µ—Ä–∞, –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.
                </Typography>

                <Divider sx={{ my: 2 }} />

                {/* –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —à—Ç—Ä–∏—Ö–∫–æ–¥–∞ */}
                <Button
                  variant="outlined"
                  startIcon={<SaveIcon />}
                  onClick={handleShare}
                  size={isMobile ? "small" : "medium"}
                  fullWidth
                >
                  –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                </Button>
              </CardContent>
            </Card>
          </Grid>
        </Grid>
      </form>
    </Box>
  );
};

export default RecordDetailPage;