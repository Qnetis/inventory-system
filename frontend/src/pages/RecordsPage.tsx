/* eslint-disable @typescript-eslint/no-explicit-any */

// frontend/src/pages/RecordsPage.tsx
import React, { useState, useMemo } from 'react';
import {
  Box,
  Button,
  Card,
  CardContent,
  Typography,
  TextField,
  InputAdornment,
  IconButton,
  Chip,
  FormControlLabel,
  Switch,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  TablePagination,
  TableSortLabel,
  Skeleton,
  Alert,
  Menu,
  MenuItem,
  Tooltip,
  Badge,
} from '@mui/material';
import {
  Add as AddIcon,
  Search as SearchIcon,
  Clear as ClearIcon,
  FilterList as FilterIcon,
  Download as DownloadIcon,
  MoreVert as MoreVertIcon,
  Edit as EditIcon,
  Delete as DeleteIcon,
  Lock as LockIcon,
  Person as PersonIcon,
} from '@mui/icons-material';
import { useNavigate } from 'react-router-dom';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { format } from 'date-fns';
import { ru } from 'date-fns/locale';
import { AdvancedFilters, applyFiltersToData } from '../components/Records/AdvancedFilters';
import { recordsApi, fieldsApi } from '../services/api';
import { useAuth } from '../contexts/AuthContext';
import { ExportDialog } from '../components/Records/ExportDialog';
import { ConfirmDialog } from '../components/Common/ConfirmDialog';
import CreateRecordDialog from '../components/Records/CreateRecordDialog';

export const RecordsPage: React.FC = () => {
  const navigate = useNavigate();
  const queryClient = useQueryClient();
  const { user } = useAuth();
  const isAdmin = user?.role?.type === 'admin';

  // –°–æ—Å—Ç–æ—è–Ω–∏—è - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∏–¥–∏—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏, –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏
  const [page, setPage] = useState(0);
  const [rowsPerPage, setRowsPerPage] = useState(25);
  const [searchQuery, setSearchQuery] = useState('');
  const [orderBy, setOrderBy] = useState<string>('createdAt');
  const [order, setOrder] = useState<'asc' | 'desc'>('desc');
  const [showAllRecords, setShowAllRecords] = useState(isAdmin);
  const [filtersOpen, setFiltersOpen] = useState(false);
  const [activeFilters, setActiveFilters] = useState<any[]>([]);
  const [exportDialogOpen, setExportDialogOpen] = useState(false);
  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);
  const [selectedRecord, setSelectedRecord] = useState<any>(null);
  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);
  
  // –ù–û–í–û–ï: –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
  const [createDialogOpen, setCreateDialogOpen] = useState(false);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö - –¥–æ–±–∞–≤–ª—è–µ–º refetchOnWindowFocus –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª—é—á –∫–µ—à–∞
  const { data: recordsData = { data: [] }, isLoading: recordsLoading, error: recordsError } = useQuery({
    queryKey: ['records', showAllRecords], // –£–ø—Ä–æ—â–∞–µ–º –∫–ª—é—á –∫–µ—à–∞
    queryFn: () => {
      console.log('üì° –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–ø–∏—Å–∏ —Å showAll:', showAllRecords);
      return recordsApi.getAll({ showAll: showAllRecords });
    },
    staleTime: 0, // –í—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    refetchOnWindowFocus: true,
    refetchOnMount: true,
  });

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
  React.useEffect(() => {
    if (recordsData?.data && !recordsLoading) {
      console.log('‚úÖ –ó–∞–ø–∏—Å–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ:');
      console.log('üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π:', recordsData.data.length);
      if (recordsData.data.length > 0) {
        console.log('üìù –ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å:', recordsData.data[0]);
        console.log('üÜî –ü–æ–ª—è ID –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏:');
        console.log('   - id:', recordsData.data[0].id);
        console.log('   - documentId:', recordsData.data[0].documentId);
      }
    }
    if (recordsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø–∏—Å–µ–π:', recordsError);
    }
  }, [recordsData, recordsLoading, recordsError]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª–µ–π
  const { data: fieldsData = { data: [] } } = useQuery({
    queryKey: ['fields'],
    queryFn: () => fieldsApi.getAll(),
    staleTime: 5 * 60 * 1000,
  });

  // –ú—É—Ç–∞—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
  const deleteMutation = useMutation({
    mutationFn: (id: string) => recordsApi.delete(id),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['records'] });
      setDeleteDialogOpen(false);
      setSelectedRecord(null);
    },
  });

  // –ù–û–í–û–ï: –ú—É—Ç–∞—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
  const createMutation = useMutation({
    mutationFn: (data: any) => recordsApi.create(data),
    onSuccess: (result) => {
      queryClient.invalidateQueries({ queryKey: ['records'] });
      setCreateDialogOpen(false);
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏
      if (result?.data?.id) {
        navigate(`/records/${result.data.id}`);
      }
    },
    onError: (error) => {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏:', error);
    },
  });

  const records = recordsData?.data || [];

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
  const handleChangePage = (event: unknown, newPage: number) => {
    setPage(newPage);
  };

  const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {
    setRowsPerPage(parseInt(event.target.value, 10));
    setPage(0);
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–æ–∏—Å–∫–∞
  const handleClearSearch = () => {
    setSearchQuery('');
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
  const handleSort = (property: string) => {
    const isAsc = orderBy === property && order === 'asc';
    setOrder(isAsc ? 'desc' : 'asc');
    setOrderBy(property);
  };

  const handleMenuClick = (event: React.MouseEvent<HTMLElement>, record: any) => {
    setAnchorEl(event.currentTarget);
    setSelectedRecord(record);
  };

  const handleMenuClose = () => {
    setAnchorEl(null);
    setSelectedRecord(null);
  };

  const handleEdit = () => {
    if (selectedRecord) {
      navigate(`/records/${selectedRecord.id}`);
    }
    handleMenuClose();
  };

  const handleDelete = () => {
    setDeleteDialogOpen(true);
    handleMenuClose();
  };

  const confirmDelete = () => {
    if (selectedRecord) {
      deleteMutation.mutate(selectedRecord.id);
    }
  };

  const handleApplyFilters = (filters: any[]) => {
    setActiveFilters(filters);
    setPage(0);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è showAllRecords
  const handleShowAllToggle = (checked: boolean) => {
    console.log('–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ showAll –Ω–∞:', checked);
    setShowAllRecords(checked);
    setPage(0); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
  };

  // –ù–û–í–û–ï: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
  const handleCreateRecord = (data: any) => {
    console.log('–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Å –¥–∞–Ω–Ω—ã–º–∏:', data);
    createMutation.mutate(data);
  };

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ —Å—Ç—Ä–æ–∫–µ
  const handleRowClick = (record: any) => {
    // –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log('üñ±Ô∏è –ö–ª–∏–∫ –ø–æ —Å—Ç—Ä–æ–∫–µ –∑–∞–ø–∏—Å–∏:');
    console.log('üìã –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏:', record);
    console.log('üÜî record.id:', record.id);
    console.log('üìÑ record.documentId:', record.documentId);
    console.log('üì¶ record.inventoryNumber:', record.inventoryNumber);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª–µ ID (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç documentId, –∑–∞—Ç–µ–º id)
    const recordId = record.documentId || record.id;
    console.log('üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π ID –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:', recordId);
    
    if (recordId) {
      console.log('‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∑–∞–ø–∏—Å–∏:', `/records/${recordId}`);
      navigate(`/records/${recordId}`);
    } else {
      console.error('‚ùå ID –∑–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω:', record);
      alert('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –∑–∞–ø–∏—Å–∏');
    }
  };

  const formatFieldValue = (value: any, fieldType: string) => {
    if (!value) return '';
    
    switch (fieldType) {
      case 'MONEY':
        return new Intl.NumberFormat('ru-RU', {
          style: 'currency',
          currency: 'RUB'
        }).format(parseFloat(value));
      case 'NUMBER':
        return new Intl.NumberFormat('ru-RU').format(parseFloat(value));
      case 'CHECKBOX':
        return value ? '–î–∞' : '–ù–µ—Ç';
      case 'DATE':
        return format(new Date(value), 'dd.MM.yyyy', { locale: ru });
      default:
        return String(value);
    }
  };

  // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const filteredRecords = useMemo(() => {
    let filtered = records;

    // –ü–æ–∏—Å–∫
    if (searchQuery) {
      filtered = filtered.filter((record: any) => {
        const searchLower = searchQuery.toLowerCase();
        return (
          record.inventoryNumber?.toLowerCase().includes(searchLower) ||
          record.barcode?.toLowerCase().includes(searchLower) ||
          record.name?.toLowerCase().includes(searchLower) ||
          JSON.stringify(record.dynamicData || {}).toLowerCase().includes(searchLower)
        );
      });
    }

    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    if (activeFilters.length > 0) {
      filtered = applyFiltersToData(filtered, activeFilters);
    }

    return filtered;
  }, [records, searchQuery, activeFilters]);

  // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
  const sortedRecords = useMemo(() => {
    return [...filteredRecords].sort((a: any, b: any) => {
      let aVal = a[orderBy];
      let bVal = b[orderBy];

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π
      if (orderBy.includes('.')) {
        const keys = orderBy.split('.');
        aVal = keys.reduce((obj, key) => obj?.[key], a);
        bVal = keys.reduce((obj, key) => obj?.[key], b);
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ null/undefined –∑–Ω–∞—á–µ–Ω–∏–π
      if (aVal == null && bVal == null) return 0;
      if (aVal == null) return order === 'asc' ? -1 : 1;
      if (bVal == null) return order === 'asc' ? 1 : -1;

      // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ
      if (aVal < bVal) return order === 'asc' ? -1 : 1;
      if (aVal > bVal) return order === 'asc' ? 1 : -1;
      return 0;
    });
  }, [filteredRecords, orderBy, order]);

  // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
  const paginatedRecords = useMemo(() => {
    const start = page * rowsPerPage;
    return sortedRecords.slice(start, start + rowsPerPage);
  }, [sortedRecords, page, rowsPerPage]);

  if (recordsLoading) {
    return (
      <Box>
        {Array.from(new Array(5)).map((_, index) => (
          <Skeleton key={index} variant="rectangular" height={60} sx={{ mb: 1 }} />
        ))}
      </Box>
    );
  }

  if (recordsError) {
    return (
      <Alert severity="error">
        –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.
      </Alert>
    );
  }

  return (
    <Box>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –¥–µ–π—Å—Ç–≤–∏—è */}
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
        <Typography variant="h4" component="h1">
          –ó–∞–ø–∏—Å–∏
        </Typography>
        
        <Box sx={{ display: 'flex', gap: 1 }}>
          <Button
            variant="outlined"
            startIcon={<FilterIcon />}
            onClick={() => setFiltersOpen(true)}
            color={activeFilters.length > 0 ? 'primary' : 'inherit'}
          >
            <Badge badgeContent={activeFilters.length} color="primary">
              –§–∏–ª—å—Ç—Ä—ã
            </Badge>
          </Button>
          
          <Button
            variant="outlined"
            startIcon={<DownloadIcon />}
            onClick={() => setExportDialogOpen(true)}
          >
            –≠–∫—Å–ø–æ—Ä—Ç
          </Button>
          
          {/* –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å" */}
          <Button
            variant="contained"
            startIcon={<AddIcon />}
            onClick={() => setCreateDialogOpen(true)}
          >
            –î–æ–±–∞–≤–∏—Ç—å
          </Button>
        </Box>
      </Box>

      {/* –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—ã */}
      <Card sx={{ mb: 3 }}>
        <CardContent>
          <Box sx={{ display: 'flex', gap: 2, alignItems: 'center', flexWrap: 'wrap' }}>
            {/* –ü–æ–∏—Å–∫ */}
            <TextField
              placeholder="–ü–æ–∏—Å–∫ –∑–∞–ø–∏—Å–µ–π..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              size="small"
              sx={{ minWidth: 250, flexGrow: 1 }}
              InputProps={{
                startAdornment: (
                  <InputAdornment position="start">
                    <SearchIcon />
                  </InputAdornment>
                ),
                endAdornment: searchQuery && (
                  <InputAdornment position="end">
                    <IconButton size="small" onClick={handleClearSearch}>
                      <ClearIcon />
                    </IconButton>
                  </InputAdornment>
                ),
              }}
            />

            {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–µ–π */}
            <FormControlLabel
              control={
                <Switch
                  checked={showAllRecords}
                  onChange={(e) => handleShowAllToggle(e.target.checked)}
                  color="primary"
                />
              }
              label={
                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                  <PersonIcon fontSize="small" />
                  <Typography variant="body2">
                    {showAllRecords ? '–í—Å–µ –∑–∞–ø–∏—Å–∏' : '–¢–æ–ª—å–∫–æ –º–æ–∏'}
                  </Typography>
                </Box>
              }
            />

            {/* –ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã */}
            {activeFilters.length > 0 && (
              <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap' }}>
                {activeFilters.map((filter) => (
                  <Chip
                    key={filter.id}
                    label={`${filter.field}: ${filter.value}`}
                    size="small"
                    onDelete={() => {
                      setActiveFilters(prev => prev.filter(f => f.id !== filter.id));
                    }}
                  />
                ))}
              </Box>
            )}
          </Box>
        </CardContent>
      </Card>

      {/* –¢–∞–±–ª–∏—Ü–∞ –∑–∞–ø–∏—Å–µ–π */}
      <Card>
        <CardContent>
          <TableContainer>
            <Table>
              <TableHead>
                <TableRow>
                  <TableCell>
                    <TableSortLabel
                      active={orderBy === 'inventoryNumber'}
                      direction={orderBy === 'inventoryNumber' ? order : 'asc'}
                      onClick={() => handleSort('inventoryNumber')}
                    >
                      –ò–Ω–≤–µ–Ω—Ç–∞—Ä–Ω—ã–π –Ω–æ–º–µ—Ä
                    </TableSortLabel>
                  </TableCell>
                  
                  <TableCell>
                    <TableSortLabel
                      active={orderBy === 'barcode'}
                      direction={orderBy === 'barcode' ? order : 'asc'}
                      onClick={() => handleSort('barcode')}
                    >
                      –®—Ç—Ä–∏—Ö–∫–æ–¥
                    </TableSortLabel>
                  </TableCell>

                  {/* –ü–µ—Ä–≤—ã–µ 3 –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –ø–æ–ª—è */}
                  {fieldsData?.data?.slice(0, 3).map((field: any) => (
                    <TableCell key={field.id}>
                      <TableSortLabel
                        active={orderBy === field.name}
                        direction={orderBy === field.name ? order : 'asc'}
                        onClick={() => handleSort(field.name)}
                      >
                        {field.name}
                      </TableSortLabel>
                    </TableCell>
                  ))}

                  <TableCell>
                    <TableSortLabel
                      active={orderBy === 'createdAt'}
                      direction={orderBy === 'createdAt' ? order : 'asc'}
                      onClick={() => handleSort('createdAt')}
                    >
                      –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
                    </TableSortLabel>
                  </TableCell>

                  {/* –°—Ç–æ–ª–±–µ—Ü "–í–ª–∞–¥–µ–ª–µ—Ü" –≤—Å–µ–≥–¥–∞ –≤–∏–¥–µ–Ω */}
                  <TableCell>–í–ª–∞–¥–µ–ª–µ—Ü</TableCell>

                  <TableCell align="right">–î–µ–π—Å—Ç–≤–∏—è</TableCell>
                </TableRow>
              </TableHead>
              
              <TableBody>
                {paginatedRecords.length === 0 ? (
                  <TableRow>
                    <TableCell colSpan={fieldsData?.data?.length + 5} align="center">
                      <Typography color="text.secondary">
                        –ó–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
                      </Typography>
                    </TableCell>
                  </TableRow>
                ) : (
                  paginatedRecords.map((record) => {
                    const canEdit = record.canEdit || record.isOwner || isAdmin;
                    const ownerData = record.owner;
                    
                    return (
                      <TableRow
                        key={record.id || record.documentId}
                        hover
                        onClick={() => handleRowClick(record)}
                        sx={{ cursor: 'pointer' }}
                      >
                        <TableCell>
                          {record.inventoryNumber}
                        </TableCell>
                        
                        <TableCell>
                          {record.barcode}
                        </TableCell>

                        {/* –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è */}
                        {fieldsData?.data?.slice(0, 3).map((field: any) => {
                          const value = record.dynamicData?.[field.id];
                          return (
                            <TableCell key={field.id}>
                              {formatFieldValue(value, field.fieldType)}
                            </TableCell>
                          );
                        })}

                        <TableCell>
                          {record.createdAt ? format(new Date(record.createdAt), 'dd.MM.yyyy HH:mm', { locale: ru }) : ''}
                        </TableCell>

                        <TableCell>
                          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                            <PersonIcon fontSize="small" color="action" />
                            <Typography variant="body2">
                              {ownerData?.username || ownerData?.fullName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
                            </Typography>
                          </Box>
                        </TableCell>

                        <TableCell align="right" onClick={(e) => e.stopPropagation()}>
                          <Tooltip title={canEdit ? '–î–æ—Å—Ç—É–ø–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è' : '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤'}>
                            <span>
                              <IconButton
                                size="small"
                                onClick={(e) => handleMenuClick(e, record)}
                                disabled={!canEdit}
                              >
                                {canEdit ? <MoreVertIcon /> : <LockIcon />}
                              </IconButton>
                            </span>
                          </Tooltip>
                        </TableCell>
                      </TableRow>
                    );
                  })
                )}
              </TableBody>
            </Table>
          </TableContainer>

          {/* –ü–∞–≥–∏–Ω–∞—Ü–∏—è */}
          <TablePagination
            component="div"
            count={filteredRecords.length}
            page={page}
            onPageChange={handleChangePage}
            rowsPerPage={rowsPerPage}
            onRowsPerPageChange={handleChangeRowsPerPage}
            rowsPerPageOptions={[10, 25, 50, 100]}
            labelRowsPerPage="–ó–∞–ø–∏—Å–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:"
            labelDisplayedRows={({ from, to, count }) => `${from}‚Äì${to} –∏–∑ ${count}`}
          />
        </CardContent>
      </Card>

      {/* –ú–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π */}
      <Menu
        anchorEl={anchorEl}
        open={Boolean(anchorEl)}
        onClose={handleMenuClose}
      >
        <MenuItem onClick={handleEdit} disabled={!selectedRecord?.canEdit && !isAdmin}>
          <EditIcon fontSize="small" sx={{ mr: 1 }} />
          –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        </MenuItem>
        <MenuItem onClick={handleDelete} disabled={!selectedRecord?.canEdit && !isAdmin}>
          <DeleteIcon fontSize="small" sx={{ mr: 1 }} />
          –£–¥–∞–ª–∏—Ç—å
        </MenuItem>
      </Menu>

      {/* –ù–û–í–û–ï: –î–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ */}
      <CreateRecordDialog
        open={createDialogOpen}
        onClose={() => setCreateDialogOpen(false)}
        fields={fieldsData?.data || []}
        onSubmit={handleCreateRecord}
        isLoading={createMutation.isPending}
        error={createMutation.isError ? '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–µ–π –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.' : null}
      />

      {/* –î–∏–∞–ª–æ–≥ —Ñ–∏–ª—å—Ç—Ä–æ–≤ */}
      <AdvancedFilters
        open={filtersOpen}
        onClose={() => setFiltersOpen(false)}
        fields={fieldsData?.data || []}
        onApplyFilters={handleApplyFilters}
        initialFilters={activeFilters}
      />

      {/* –î–∏–∞–ª–æ–≥ —ç–∫—Å–ø–æ—Ä—Ç–∞ */}
      <ExportDialog
        open={exportDialogOpen}
        onClose={() => setExportDialogOpen(false)}
        records={filteredRecords}
        fields={fieldsData?.data || []}
      />

      {/* –î–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è */}
      <ConfirmDialog
        open={deleteDialogOpen}
        title="–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å?"
        message="–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å."
        onConfirm={confirmDelete}
        onCancel={() => setDeleteDialogOpen(false)}
        confirmText="–£–¥–∞–ª–∏—Ç—å"
        cancelText="–û—Ç–º–µ–Ω–∞"
        confirmColor="error"
      />
    </Box>
  );
};

export default RecordsPage;