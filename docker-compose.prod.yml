services:
  database:
    image: postgres:15
    container_name: inventory_db_prod
    environment:
      POSTGRES_DB: inventory_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - inventory_network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: inventory_backend_prod
    environment:
      - NODE_ENV=production
      - DATABASE_CLIENT=postgres
      - DATABASE_URL=postgresql://${DATABASE_USERNAME}:${DATABASE_PASSWORD}@database:5432/${DATABASE_NAME}
      - DATABASE_HOST=database
      - DATABASE_PORT=5432
      - DATABASE_NAME=${DATABASE_NAME}
      - DATABASE_USERNAME=${DATABASE_USERNAME}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - ADMIN_JWT_SECRET=${ADMIN_JWT_SECRET}
      - APP_KEYS=${APP_KEYS}
      - API_TOKEN_SALT=${API_TOKEN_SALT}
      - TRANSFER_TOKEN_SALT=${TRANSFER_TOKEN_SALT}
      - HOST=0.0.0.0
      - PORT=1337
    ports:
    - "1337:1337"
    depends_on:
      - database
    volumes:
      - uploads_data:/app/public/uploads
    restart: unless-stopped
    networks:
      - inventory_network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        # КЛЮЧЕВОЕ ИЗМЕНЕНИЕ: Убираем порт, чтобы фронтенд использовал nginx proxy
        - VITE_API_URL=http://93.189.228.76
    container_name: inventory_frontend_prod
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - inventory_network

volumes:
  postgres_data:
  uploads_data:

networks:
  inventory_network:
    driver: bridge