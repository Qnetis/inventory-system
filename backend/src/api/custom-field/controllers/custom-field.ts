/**
 * custom-field controller
 */

import { factories } from '@strapi/strapi';

export default factories.createCoreController('api::custom-field.custom-field', ({ strapi }) => ({
  // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ find –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å Strapi v5
  async find(ctx) {
    try {
      console.log('üîç Custom Field Find - –Ω–∞—á–∞–ª–æ –∑–∞–ø—Ä–æ—Å–∞');
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º Document Service API –¥–ª—è Strapi v5
      const results = await strapi.documents('api::custom-field.custom-field').findMany({
        sort: { order: 'asc' },
        status: 'published',
        ...ctx.query
      });

      console.log('üìã Custom fields –Ω–∞–π–¥–µ–Ω–æ:', results?.length || 0);
      
      return {
        data: results || [],
        meta: {
          pagination: {
            page: 1,
            pageSize: results?.length || 0,
            pageCount: 1,
            total: results?.length || 0
          }
        }
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è custom fields:', error);
      throw error;
    }
  },

  // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ create
  async create(ctx) {
    try {
      console.log('‚ûï Creating custom field with data:', ctx.request.body);
      
      const { data } = ctx.request.body;
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º Document Service API
      const result = await strapi.documents('api::custom-field.custom-field').create({
        data,
        status: 'published' // –°—Ä–∞–∑—É –ø—É–±–ª–∏–∫—É–µ–º
      });

      console.log('‚úÖ Custom field —Å–æ–∑–¥–∞–Ω–æ:', result.id);
      
      return { data: result };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è custom field:', error);
      throw error;
    }
  },

  // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ update
  async update(ctx) {
    try {
      const { id } = ctx.params;
      const { data } = ctx.request.body;
      
      console.log('üìù Updating custom field:', id, 'with data:', data);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º Document Service API
      const result = await strapi.documents('api::custom-field.custom-field').update({
        documentId: id,
        data,
        status: 'published'
      });

      console.log('‚úÖ Custom field –æ–±–Ω–æ–≤–ª–µ–Ω–æ:', result.id);
      
      return { data: result };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è custom field:', error);
      throw error;
    }
  },

  // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ delete - –∫–ª—é—á–µ–≤–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ!
  async delete(ctx) {
    try {
      const { id } = ctx.params;
      
      console.log('üóëÔ∏è Deleting custom field with ID:', id);
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª–µ
      const existingField = await strapi.documents('api::custom-field.custom-field').findFirst({
        filters: { documentId: id }
      });

      if (!existingField) {
        console.log('‚ùå Custom field –Ω–µ –Ω–∞–π–¥–µ–Ω–æ:', id);
        return ctx.notFound('Custom field not found');
      }

      console.log('üìã –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', existingField.name);

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º Document Service API –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
      const result = await strapi.documents('api::custom-field.custom-field').delete({
        documentId: id
      });

      console.log('‚úÖ Custom field —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ:', id);
      
      return { data: result };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è custom field:', error);
      console.error('Error stack:', error.stack);
      throw error;
    }
  },

  // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ findOne
  async findOne(ctx) {
    try {
      const { id } = ctx.params;
      
      console.log('üîç Finding custom field:', id);
      
      const result = await strapi.documents('api::custom-field.custom-field').findFirst({
        filters: { documentId: id },
        status: 'published'
      });

      if (!result) {
        return ctx.notFound('Custom field not found');
      }

      console.log('‚úÖ Custom field –Ω–∞–π–¥–µ–Ω–æ:', result.name);
      
      return { data: result };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è custom field:', error);
      throw error;
    }
  }
}));