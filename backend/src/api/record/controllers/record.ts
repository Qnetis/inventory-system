// backend/src/api/record/controllers/record.ts
'use strict';

const { createCoreController } = require('@strapi/strapi').factories;
const { v4: uuidv4 } = require('uuid');

interface UserStatistic {
  user: string;
  count: number;
  totalMoney: number;
}

module.exports = createCoreController('api::record.record', ({ strapi }) => ({
  
  async create(ctx) {
    try {
      const { data } = ctx.request.body;
      const user = ctx.state.user;
      
      console.log('Create request data:', data);
      console.log('User:', user);
      
      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤
      const inventoryNumber = uuidv4();
      const barcode = this.generateEAN13();
      
      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ –∑–∞–ø–∏—Å–∏ –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ
      const recordName = data.name || `–ó–∞–ø–∏—Å—å ${inventoryNumber.slice(0, 8)}`;
      
      // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º Document Service –¥–ª—è Strapi v5
      const entity = await strapi.documents('api::record.record').create({
        data: {
          name: recordName,
          inventoryNumber,
          barcode,
          dynamicData: data.dynamicData || {},
          owner: user.id,
        },
        status: 'published' // –°—Ä–∞–∑—É –ø—É–±–ª–∏–∫—É–µ–º –∑–∞–ø–∏—Å—å
      });
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å —Å populate
      const populatedEntity = await strapi.documents('api::record.record').findOne({
        documentId: entity.documentId,
        populate: ['owner'],
        status: 'published'
      });
      
      return {
        data: populatedEntity,
        meta: {}
      };
      
    } catch (error) {
      console.error('Create error:', error);
      ctx.throw(500, error.message);
    }
  },
  
  async find(ctx) {
    try {
      const user = ctx.state.user;
      const { showAll } = ctx.query;
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ø–∞—Ä—Å–∏–º boolean –∏–∑ —Å—Ç—Ä–æ–∫–∏
      const showAllBool = showAll === 'true' || showAll === true;
      
      console.log('Find records - User:', user.username, 'Role:', user.role?.type, 'showAll:', showAll, 'parsed:', showAllBool);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ showAll
      let filters: any = {};
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ - –ª—é–±–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤–∏–¥–µ—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –ø—Ä–∏ showAll=true
      if (showAllBool) {
        // –ï—Å–ª–∏ showAll = true, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ (–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞) –¥–ª—è –ª—é–±–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏, —Ñ–∏–ª—å—Ç—Ä –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ–º');
      } else {
        // –ï—Å–ª–∏ showAll = false, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        filters.owner = user.id;
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∑–∞–ø–∏—Å–∏, –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ owner:', user.id);
      }
      
      console.log('Applied filters:', filters);
      
      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Document Service
      const records = await strapi.documents('api::record.record').findMany({
        filters,
        populate: ['owner'],
        status: 'published'
      });
      
      console.log(`Found ${records.length} records`);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∞–≤–∞—Ö —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      const recordsWithPermissions = records.map((record: any) => ({
        ...record,
        canEdit: record.owner?.id === user.id || user.role?.type === 'admin',
        isOwner: record.owner?.id === user.id,
      }));
      
      return {
        data: recordsWithPermissions,
        meta: {}
      };
      
    } catch (error) {
      console.error('Find error:', error);
      ctx.throw(500, error.message);
    }
  },
  
  async findOne(ctx) {
    try {
      const { id: documentId } = ctx.params;
      const user = ctx.state.user;
      
      console.log('üîç FindOne called with documentId:', documentId);
      console.log('üë§ User:', user.username, 'Role:', user.role?.type);
      
      // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ documentId
      let record;
      try {
        console.log('üéØ –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ documentId:', documentId);
        record = await strapi.documents('api::record.record').findOne({
          documentId: documentId,
          populate: ['owner'],
          status: 'published'
        });
        console.log('‚úÖ –ó–∞–ø–∏—Å—å –Ω–∞–π–¥–µ–Ω–∞ –ø–æ documentId:', !!record);
      } catch (error) {
        console.log('‚ùå Document not found by documentId, trying by id...');
        console.log('Error details:', error.message);
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ documentId, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ id
        const records = await strapi.documents('api::record.record').findMany({
          filters: { id: documentId },
          populate: ['owner'],
          status: 'published'
        });
        
        console.log('üîç –ü–æ–∏—Å–∫ –ø–æ id —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', records.length, '–∑–∞–ø–∏—Å–µ–π');
        if (records.length > 0) {
          record = records[0];
          console.log('‚úÖ –ó–∞–ø–∏—Å—å –Ω–∞–π–¥–µ–Ω–∞ –ø–æ id:', record.id, 'documentId:', record.documentId);
        }
      }
      
      if (!record) {
        console.log('‚ùå Record not found with any method');
        return ctx.notFound('Record not found');
      }
      
      const ownerId = record.owner?.id;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
      if (user.role?.type !== 'admin' && ownerId !== user.id) {
        return ctx.forbidden('Access denied');
      }
      
      return {
        data: {
          ...record,
          canEdit: ownerId === user.id || user.role?.type === 'admin',
          isOwner: ownerId === user.id,
        },
        meta: {}
      };
    } catch (error) {
      console.error('FindOne error:', error);
      ctx.throw(500, error.message);
    }
  },
  
  async update(ctx) {
    try {
      const { id: documentId } = ctx.params;
      const user = ctx.state.user;
      const { data } = ctx.request.body;
      
      console.log('Update called with documentId:', documentId);
      
      // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
      let existingRecord;
      try {
        existingRecord = await strapi.documents('api::record.record').findOne({
          documentId: documentId,
          populate: ['owner'],
          status: 'published'
        });
      } catch (error) {
        // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ id –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ documentId
        const records = await strapi.documents('api::record.record').findMany({
          filters: { id: documentId },
          populate: ['owner'],
          status: 'published'
        });
        
        if (records.length > 0) {
          existingRecord = records[0];
        }
      }
      
      if (!existingRecord) {
        return ctx.notFound('Record not found');
      }
      
      const ownerId = existingRecord.owner?.id;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
      if (user.role?.type !== 'admin' && ownerId !== user.id) {
        return ctx.forbidden('You can only edit your own records');
      }
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –ø–æ–ª–µ–π
      const customFields = await strapi.documents('api::custom-field.custom-field').findMany({
        sort: { order: 'asc' },
        status: 'published'
      });
      
      const errors = [];
      for (const field of customFields) {
        if (field.isRequired && !data.dynamicData?.[field.id]) {
          errors.push(`Field "${field.name}" is required`);
        }
      }
      
      if (errors.length > 0) {
        return ctx.badRequest('Validation failed', { errors });
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
      const updatedRecord = await strapi.documents('api::record.record').update({
        documentId: existingRecord.documentId,
        data: {
          name: data.name || existingRecord.name,
          dynamicData: data.dynamicData || existingRecord.dynamicData,
        },
        status: 'published'
      });
      
      // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å —Å populate
      const populatedRecord = await strapi.documents('api::record.record').findOne({
        documentId: updatedRecord.documentId,
        populate: ['owner'],
        status: 'published'
      });
      
      return {
        data: populatedRecord,
        meta: {}
      };
      
    } catch (error) {
      console.error('Update error:', error);
      ctx.throw(500, error.message);
    }
  },
  
  async delete(ctx) {
    try {
      const { id: documentId } = ctx.params;
      const user = ctx.state.user;
      
      console.log('Delete called with documentId:', documentId);
      
      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤
      let existingRecord;
      try {
        existingRecord = await strapi.documents('api::record.record').findOne({
          documentId: documentId,
          populate: ['owner'],
          status: 'published'
        });
      } catch (error) {
        const records = await strapi.documents('api::record.record').findMany({
          filters: { id: documentId },
          populate: ['owner'],
          status: 'published'
        });
        
        if (records.length > 0) {
          existingRecord = records[0];
        }
      }
      
      if (!existingRecord) {
        return ctx.notFound('Record not found');
      }
      
      const ownerId = existingRecord.owner?.id;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
      if (user.role?.type !== 'admin' && ownerId !== user.id) {
        return ctx.forbidden('You can only delete your own records');
      }
      
      // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å
      await strapi.documents('api::record.record').delete({
        documentId: existingRecord.documentId,
      });
      
      return { data: null, meta: {} };
      
    } catch (error) {
      console.error('Delete error:', error);
      ctx.throw(500, error.message);
    }
  },

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è EAN-13 —à—Ç—Ä–∏—Ö–∫–æ–¥–∞
  generateEAN13() {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 12 —Å–ª—É—á–∞–π–Ω—ã—Ö —Ü–∏—Ñ—Ä
    let code = '';
    for (let i = 0; i < 12; i++) {
      code += Math.floor(Math.random() * 10);
    }
    
    // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Å—É–º–º—É
    let oddSum = 0;
    let evenSum = 0;
    
    for (let i = 0; i < 12; i++) {
      if (i % 2 === 0) {
        oddSum += parseInt(code[i]);
      } else {
        evenSum += parseInt(code[i]);
      }
    }
    
    const checksum = (10 - ((oddSum + evenSum * 3) % 10)) % 10;
    
    return code + checksum;
  },

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getUserStatistics(ctx) {
    try {
      const user = ctx.state.user;
      const { period = 'daily' } = ctx.query;
      
      const now = new Date();
      let startDate;
      
      switch (period) {
        case 'weekly':
          const diff = now.getDate() - now.getDay() + (now.getDay() === 0 ? -6 : 1);
          startDate = new Date(now.getFullYear(), now.getMonth(), diff);
          startDate.setHours(0, 0, 0, 0);
          break;
        case 'monthly':
          startDate = new Date(now.getFullYear(), now.getMonth(), 1);
          break;
        default:
          startDate = new Date(now.getFullYear(), now.getMonth(), now.getDate());
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Document Service
      const records = await strapi.documents('api::record.record').findMany({
        filters: {
          owner: user.id,
          createdAt: { 
            $gte: startDate.toISOString() 
          }
        },
        populate: ['owner'],
        status: 'published'
      });
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–µ–Ω–µ–∂–Ω—ã–µ –ø–æ–ª—è
      const moneyFields = await strapi.documents('api::custom-field.custom-field').findMany({
        filters: { 
          fieldType: 'MONEY'
        },
        status: 'published'
      });
      
      let totalMoney = 0;
      
      // –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É –ø–æ –¥–µ–Ω–µ–∂–Ω—ã–º –ø–æ–ª—è–º
      for (const record of records) {
        if (record.dynamicData && moneyFields.length > 0) {
          for (const field of moneyFields) {
            const value = record.dynamicData[field.id];
            if (value && !isNaN(value)) {
              totalMoney += Number(value);
            }
          }
        }
      }
      
      ctx.body = {
        user: user.fullName || user.username,
        count: records.length,
        totalMoney: totalMoney
      };
      
    } catch (error) {
      console.error('User statistics error:', error);
      ctx.throw(500, error.message || 'Error generating user statistics');
    }
  },

  // –û–±—â–∏–π –º–µ—Ç–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–∞–ª–∏–∞—Å –¥–ª—è getAllUsersStatistics)
  async statistics(ctx) {
    return this.getAllUsersStatistics(ctx);
  },

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)
  async getAllUsersStatistics(ctx) {
    try {
      const user = ctx.state.user;
      
      if (user.role?.type !== 'admin') {
        return ctx.forbidden('Only administrators can access this endpoint');
      }
      
      const { period = 'daily' } = ctx.query;
      
      const now = new Date();
      let startDate;
      
      switch (period) {
        case 'weekly':
          const diff = now.getDate() - now.getDay() + (now.getDay() === 0 ? -6 : 1);
          startDate = new Date(now.getFullYear(), now.getMonth(), diff);
          startDate.setHours(0, 0, 0, 0);
          break;
        case 'monthly':
          startDate = new Date(now.getFullYear(), now.getMonth(), 1);
          break;
        default:
          startDate = new Date(now.getFullYear(), now.getMonth(), now.getDate());
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Document Service
      const records = await strapi.documents('api::record.record').findMany({
        filters: {
          createdAt: { 
            $gte: startDate.toISOString() 
          }
        },
        populate: ['owner'],
        status: 'published'
      });
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–µ–Ω–µ–∂–Ω—ã–µ –ø–æ–ª—è
      const moneyFields = await strapi.documents('api::custom-field.custom-field').findMany({
        filters: { 
          fieldType: 'MONEY'
        },
        status: 'published'
      });
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
      const userStats: { [key: string]: UserStatistic } = {};
      
      for (const record of records) {
        const userId = record.owner?.id;
        const userName = record.owner?.fullName || record.owner?.username || 'Unknown';
        
        if (!userId) continue;
        
        if (!userStats[userId]) {
          userStats[userId] = {
            user: userName,
            count: 0,
            totalMoney: 0
          };
        }
        
        userStats[userId].count++;
        
        // –°—á–∏—Ç–∞–µ–º –¥–µ–Ω—å–≥–∏
        if (record.dynamicData && moneyFields.length > 0) {
          for (const field of moneyFields) {
            const value = record.dynamicData[field.id];
            if (value && !isNaN(value)) {
              userStats[userId].totalMoney += Number(value);
            }
          }
        }
      }
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞—Å—Å–∏–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      const stats: UserStatistic[] = Object.values(userStats);
      stats.sort((a: UserStatistic, b: UserStatistic) => b.count - a.count);
      
      ctx.body = stats;
      
    } catch (error) {
      console.error('Statistics error:', error);
      ctx.throw(500, error.message || 'Error generating statistics');
    }
  },
  
  async export(ctx) {
    try {
      const user = ctx.state.user;
      const { format = 'csv', fields = [] } = ctx.request.body;
      const { showAll } = ctx.query;
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ø–∞—Ä—Å–∏–º boolean –∏–∑ —Å—Ç—Ä–æ–∫–∏
      const showAllBool = showAll === 'true' || showAll === true;
      
      console.log('Export - User:', user.username, 'Role:', user.role?.type, 'showAll:', showAll, 'parsed:', showAllBool);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      let filters: any = {};
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É —á—Ç–æ –∏ –≤ find - –ª—é–±–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤–∏–¥–µ—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏
      if (showAllBool) {
        // –ï—Å–ª–∏ showAll = true, —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ (–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞) –¥–ª—è –ª—é–±–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        console.log('Export: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏, —Ñ–∏–ª—å—Ç—Ä –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ–º');
      } else {
        // –ï—Å–ª–∏ showAll = false, —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        filters.owner = user.id;
        console.log('Export: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∑–∞–ø–∏—Å–∏, –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ owner:', user.id);
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Document Service
      const records = await strapi.documents('api::record.record').findMany({
        filters,
        populate: ['owner'],
        status: 'published'
      });
      
      // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ CSV/Excel
      // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
      ctx.body = {
        message: 'Export functionality to be implemented',
        recordsCount: records.length,
        format,
        fields
      };
      
    } catch (error) {
      console.error('Export error:', error);
      ctx.throw(500, error.message || 'Error exporting data');
    }
  }
}));